{"version":3,"sources":["styles/variables.ts","styles/theme.ts","styles/GlobalStyles.ts","components/App/style.ts","components/AppContainer/AppContainer.tsx","components/Banner/style.ts","components/Banner/Banner.tsx","components/Header/style.ts","components/ThemeToggleButton/style.ts","components/ThemeToggleButton/ThemeToggleButton.tsx","slices/themeSlice.ts","components/Header/Header.tsx","slices/todoListSlice.ts","components/CheckIcon/style.ts","components/CheckIcon/CheckIcon.tsx","components/InputForm/style.ts","components/InputForm/InputForm.tsx","components/Todo/style.ts","components/Todo/Todo.tsx","slices/filterSlice.ts","components/ToolBar/style.ts","components/ToolBar/ToolBar.tsx","hooks/useFilter.ts","hooks/useClearCompleted.ts","components/App/App.tsx","rootReducer.ts","store.ts","index.tsx"],"names":["darkColors","darkTheme","body","textPrimary","textSecondary","textHover","listItem","listItemBorder","checkBoxBorder","lightTheme","ResetStyles","createGlobalStyle","GlobalStyles","theme","ItemWrapper","styled","div","HeaderWrapper","InputFormWrapper","AppContainer","Container","props","url","Banner","header","Heading","h2","Button","button","ThemeToggleButton","onClick","src","alt","themeSlice","createSlice","name","initialState","reducers","toggleTheme","state","actions","Header","useSelector","dispatch","useDispatch","todoListSlice","addList","reducer","action","push","payload","prepare","text","id","nanoid","checked","clearCompletedTodo","filter","todo","moveTodo","fromId","toId","fromIndex","findIndex","toIndex","tempTodo","toggleTodo","map","span","CheckIcon","Wrapper","IconContainer","Input","input","InputForm","useState","value","setValue","onSubmit","e","preventDefault","onChange","currentTarget","placeholder","IconButton","Text","Todo","useDrag","item","type","drag","useDrop","accept","drop","ref","ALL","ACTIVE","COMPLETED","filterSlice","changeFilter","FilterListItem","li","FilterButton","active","ToolBar","todoList","currentFilter","useFilter","isActive","filterOnChange","clearCompleted","useClearCompleted","length","App","DndProvider","backend","HTML5Backend","filteredList","renderList","rootReducer","combineReducers","todoListReducer","themeReducer","filterReducer","store","configureStore","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMASaA,EAEc,qBAFdA,EAKM,qBALNA,EAMU,qBANVA,EAOC,qBCZDC,EAAY,CACvBC,KDKc,qBCJdC,YAAa,OACbC,cAAeJ,EACfK,UAAWL,EACXM,SAAUN,EACVO,eAAgBP,EAChBQ,eAAgBR,GAGLS,EAAwB,CACnCP,KDde,kBCefC,YAAaH,EACbI,cAAeJ,EACfK,UAAWL,EACXM,SAAU,OACVC,eAAgBP,EAChBQ,eDhBqB,sB,OEHVE,EAAcC,YAAH,8lCAiDXC,EAAeD,YAAH,0IAEP,qBAAGE,MAAkBX,QAC1B,qBAAGW,MAAkBV,eCpDrBW,EAAcC,IAAOC,IAAV,wEAKXC,EAAgBF,IAAOC,IAAV,oDAIbE,EAAmBH,YAAOD,EAAPC,CAAH,oDCHdI,EANMJ,IAAOC,IAAV,oFCILI,EAAYL,IAAOC,IAAV,2MAKI,SAAAK,GAAK,OAAIA,EAAMC,IAAMD,EAAMC,IAAM,M,OCL5C,SAASC,EAAT,GAAqC,IAAnBD,EAAkB,EAAlBA,IAC/B,OAAO,cAACF,EAAD,CAAWE,IAAKA,ICLlB,I,EAAMF,EAAYL,IAAOS,OAAV,iFAKTC,EAAUV,IAAOW,GAAV,0ECLPC,EAASZ,IAAOa,OAAV,yKCMJ,SAASC,EAAT,GAAyD,IAA7BhB,EAA4B,EAA5BA,MAAOiB,EAAqB,EAArBA,QAChD,OACE,cAACH,EAAD,CAAQG,QAASA,EAAjB,SACa,SAAVjB,EACC,qBAAKkB,IAAI,wBAAwBC,IAAI,6BACrC,qBAAKD,IAAI,yBAAyBC,IAAI,+B,WCXjCC,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,OACdC,SAAU,CACRC,YAAa,SAACC,GACZ,MAAa,SAAVA,EACM,QAGF,WAMXD,EACEL,EAAWO,QADbF,YAGaL,IAAf,QCbe,SAASQ,IACtB,IAAM5B,EAAQ6B,aAAY,SAACH,GAAD,OAAsBA,EAAM1B,SAChD8B,EAAWC,cAIjB,OACE,eAAC,EAAD,WACE,cAACnB,EAAD,mBACA,cAACI,EAAD,CAAmBhB,MAAOA,EAAOiB,QANtB,WACba,EAASL,W,8BCMAO,GAAgBX,YAAY,CACvCC,KAAM,WACNC,aAAc,GACdC,SAAU,CACRS,QAAS,CACPC,QAAS,SAACR,EAAOS,GACfT,EAAMU,KAAKD,EAAOE,UAEpBC,QAAS,SAACC,GACR,MAAO,CACLF,QAAS,CACPG,GAAIC,cACJF,OACAG,SAAS,MAKjBC,mBAAoB,SAACjB,GACnB,OAAOA,EAAMkB,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKH,YAEnCI,SAAU,SAACpB,EAAOS,GAChB,MAAyBA,EAAOE,QAAxBU,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KACVC,EAAYvB,EAAMwB,WAAU,SAAAL,GAAI,OAAIA,EAAKL,KAAOO,KAChDI,EAAUzB,EAAMwB,WAAU,SAAAL,GAAI,OAAIA,EAAKL,KAAOQ,KAC9CI,EAAW1B,EAAMyB,GACvBzB,EAAMyB,GAAWzB,EAAMuB,GACvBvB,EAAMuB,GAAaG,GAErBC,WAAY,SAAC3B,EAAOS,GAAR,OAA0CT,EAAM4B,KAAI,SAAAT,GAC9D,OAAIA,EAAKL,KAAOL,EAAOE,QACd,2BACFQ,GADL,IAEEH,SAAUG,EAAKH,UAIZG,SAKN,GAKHb,GAAcL,QAJhBM,GADK,GACLA,QACAa,GAFK,GAELA,SACAH,GAHK,GAGLA,mBACAU,GAJK,GAILA,WAGarB,MAAf,QC5DazB,GAAYL,IAAOqD,KAAV,gNAON,qBAAGb,QAAwB,2DAA6D,iBAClF,qBAAE1C,MAAiBL,kBCP1B,SAAS6D,GAAT,GAAoD,IAAD,IAA9Bd,eAA8B,SAChE,OACE,cAAC,GAAD,CAAWA,QAASA,EAApB,SACGA,GACC,qBAAKxB,IAAI,0BAA0BC,IAAI,iBCTxC,I,YAAMsC,GAAUvD,IAAOC,IAAV,kGAMPI,GAAYL,IAAOC,IAAV,iIAKA,qBAAGH,MAAkBP,YAG9BiE,GAAgBxD,IAAOC,IAAV,kHAObwD,GAAQzD,IAAO0D,MAAV,kJAGP,qBAAG5D,MAAkBV,eCpBjB,SAASuE,KACtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMlC,EAAWC,cAUjB,OACE,cAAC,GAAD,UACE,eAAC0B,GAAD,WACE,cAACC,GAAD,UACE,cAACF,GAAD,MAEF,sBAAMS,SAdY,SAACC,GACvBA,EAAEC,iBAEFrC,EAASG,GAAQ8B,IACjBC,EAAS,KAUL,SACE,cAACL,GAAD,CAAOI,MAAOA,EAAOK,SARL,SAACF,GAAD,OAA0CF,EAASE,EAAEG,cAAcN,QAQnCO,YAAY,6BCvB/D,IAAMb,GAAUvD,IAAOC,IAAV,oGAMPI,GAAYL,IAAOC,IAAV,oKAKA,qBAAGH,MAAkBP,YACd,qBAAEO,MAAiBN,kBAGnC6E,GAAarE,IAAOa,OAAV,qLAcVyD,GAAOtE,IAAOqD,KAAV,sDACN,qBAAGvD,MAAkBV,eAE5B,qBAAEoD,SAAoB,sE,kBCvBX,SAAS+B,GAAT,GAAoC,IAApB5B,EAAmB,EAAnBA,KACrBL,EAAsBK,EAAtBL,GAAIE,EAAkBG,EAAlBH,QAASH,EAASM,EAATN,KACfT,EAAWC,cAEjB,EAAiB2C,cAAQ,iBAAO,CAC9BC,KAAM9B,EACN+B,KAAM,WAFCC,EAAT,oBAKA,EAAiBC,aAAQ,CACvBC,OAAQ,OACRC,KAAM,SAACL,GACL,IAAM5B,EAAS4B,EAAKnC,GACdQ,EAAOH,EAAKL,GAClBV,EAASgB,GAAS,CAACC,SAAQC,aALtBgC,EAAT,oBAaA,OACE,qBAAKC,IAAKD,EAAV,SACE,cAAC,GAAD,CAAWC,IAAKJ,EAAhB,SACE,eAAC,GAAD,WACE,cAACN,GAAD,CAAYtD,QARL,WACba,EAASuB,GAAWb,KAOd,SACE,cAACgB,GAAD,CAAWd,QAASA,MAEtB,cAAC8B,GAAD,CAAM9B,QAASA,EAAf,SAAyBH,WCpC5B,I,SAAM2C,GAAc,MACdC,GAAiB,SACjBC,GAAoB,YAMpBC,GAAchE,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZqD,KAAMM,IAER1D,SAAU,CACR8D,aAAc,SAAC5D,EAAOS,GACpBT,EAAMkD,KAAOzC,EAAOE,YAMxBiD,GACED,GAAY1D,QADd2D,aAGaD,MAAf,QC1BO,IAAM9E,GAAYL,IAAOC,IAAV,wMAIA,qBAAGH,MAAkBP,YAIhC,qBAAGO,MAAkBT,iBAGnBgG,GAAiBrF,IAAOsF,GAAV,qGAUdC,GAAevF,IAAOa,OAAV,iQASZ,qBAAGf,MAAkBR,aAI9B,SAAAgB,GAAK,OAAIA,EAAMkF,QAAN,iBAA0BlF,EAAMR,MAAMR,cC5BpC,SAASmG,KACtB,IAAMC,EAAW/D,aAAY,SAACH,GAAD,OAAsBA,EAAMkE,YACzD,ECNK,WACL,IAAM9D,EAAWC,cACX8D,EAAgBhE,aAAY,SAACH,GAAD,OAAsBA,EAAMkB,UAc9D,MAAO,CARU,SAACgC,GAChB,OAAIA,IAASiB,EAAcjB,MALN,SAACA,GACtB9C,EAASwD,GAAaV,MDCWkB,GAAnC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EERO,WACb,IAAMnE,EAAWC,cAMjB,OAJuB,WACrBD,EAASa,OFIYuD,GAEvB,OACE,eAAC,GAAD,WACE,gCAAMN,EAASO,OAAf,iBACA,+BACE,cAACZ,GAAD,UACE,cAACE,GAAD,CAAcC,OAAQK,EAASb,IAAMjE,QAAS,kBAAM+E,EAAed,KAAnE,mBAEF,cAACK,GAAD,UACE,cAACE,GAAD,CAAcC,OAAQK,EAASZ,IAASlE,QAAS,kBAAM+E,EAAeb,KAAtE,sBAEF,cAACI,GAAD,UACE,cAACE,GAAD,CAAcC,OAAQK,EAASX,IAAYnE,QAAS,kBAAM+E,EAAeZ,KAAzE,4BAGJ,cAACK,GAAD,CAAcxE,QAASgF,EAAvB,gCGLS,SAASG,KACtB,IAAMR,EAAW/D,aAAY,SAACH,GAAD,OAAsBA,EAAMkE,YACnD5F,EAAQ6B,aAAY,SAACH,GAAD,OAAsBA,EAAM1B,SAChD4C,EAASf,aAAY,SAACH,GAAD,OAAsBA,EAAMkB,UAuBvD,OACE,eAAC,IAAD,CAAe5C,MAAiB,SAAVA,EAAmBZ,EAAYQ,EAArD,UACE,cAACG,EAAD,IACA,cAACW,EAAD,CAAQD,IAAI,iCACZ,eAAC,EAAD,WACE,cAACL,EAAD,UACE,cAACwB,EAAD,MAEF,cAACvB,EAAD,UACE,cAACwD,GAAD,MAEF,eAAC5D,EAAD,WACE,cAACoG,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACE,6BAlCS,WAGjB,IAAIC,EAA6B,YAAOZ,GAExC,OAAQhD,EAAOgC,MACb,KAAKM,GACH,MACF,KAAKE,GACHoB,EAAeZ,EAAShD,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKH,WAC5C,MACF,KAAKyC,GACHqB,EAAeZ,EAAShD,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKH,WAIhD,OAAO8D,EAAalD,KAAI,SAACT,GAAD,OACtB,cAAC4B,GAAD,CAAoB5B,KAAMA,GAAfA,EAAKL,OAkBPiE,OAGL,cAACd,GAAD,a,YCpDKe,GARKC,aAAgB,CAClCf,SAAUgB,GACV5G,MAAO6G,EACPjE,OAAQkE,KCLGC,GAAQC,YAAe,CAClC9E,QAASwE,KAIiBK,GAAbE,SCDfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUL,MAAOA,GAAjB,UACE,cAAClH,EAAD,IACA,cAACuG,GAAD,SAGJiB,SAASC,eAAe,W","file":"static/js/main.9a4fe502.chunk.js","sourcesContent":["export const lightColors = {\n  veryLightGray: 'hsl(0, 0%, 98%)',\n  veryLightGrayishBlue: 'hsl(236, 33%, 92%)',\n  lightGrayishBlue: 'hsl(233, 11%, 84%)',\n  darkGrayishBlue: 'hsl(236, 9%, 61%)',\n  veryDarkGrayishBlue: 'hsl(235, 19%, 35%)',\n  brightBlue: 'hsl(220, 98%, 61%)',\n}\n\nexport const darkColors = {\n  veryDarkBlue: 'hsl(235, 21%, 11%)',\n  veryDarkDesaturatedBlue: 'hsl(235, 24%, 19%)',\n  lightGrayishBlue: 'hsl(234, 39%, 85%)',\n  lightGrayishBlueHover: 'hsl(236, 33%, 92%)',\n  darkGrayishBlue: 'hsl(234, 11%, 52%)',\n  veryDarkGrayishBlue: 'hsl(233, 14%, 35%)',\n  brightBlue: 'hsl(220, 98%, 61%)',\n}\n","import { lightColors, darkColors } from \"./variables\";\n\nexport type ThemeType = typeof darkTheme;\n\nexport const darkTheme = {\n  body: darkColors.veryDarkBlue,\n  textPrimary: '#fff',\n  textSecondary: darkColors.darkGrayishBlue,\n  textHover: darkColors.brightBlue,\n  listItem: darkColors.veryDarkDesaturatedBlue,\n  listItemBorder: darkColors.veryDarkGrayishBlue,\n  checkBoxBorder: darkColors.veryDarkGrayishBlue,\n};\n\nexport const lightTheme: ThemeType = {\n  body: lightColors.veryLightGray,\n  textPrimary: darkColors.darkGrayishBlue,\n  textSecondary: darkColors.veryDarkDesaturatedBlue,\n  textHover: darkColors.brightBlue,\n  listItem: '#fff',\n  listItemBorder: darkColors.darkGrayishBlue,\n  checkBoxBorder: lightColors.veryDarkGrayishBlue,\n}\n\nconst theme = darkTheme;\nexport default theme;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const ResetStyles = createGlobalStyle`\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, font, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    font-weight: inherit;\n    font-style: inherit;\n    font-size: 100%;\n    font-family: inherit;\n    vertical-align: baseline;\n  }\n  /* remember to define focus styles! */\n  :focus {\n    outline: 0;\n  }\n  body {\n    line-height: 1;\n    color: black;\n    background: white;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  /* tables still need 'cellspacing=\"0\"' in the markup */\n  table {\n    border-collapse: separate;\n    border-spacing: 0;\n  }\n  caption, th, td {\n    text-align: left;\n    font-weight: normal;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: \"\";\n  }\n  blockquote, q {\n    quotes: \"\" \"\";\n  }\n`\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.textPrimary};\n    font-size: 18px;\n    font-family: 'Josefin Sans';\n  }\n`\n","import styled from \"styled-components\";\n\nexport const ItemWrapper = styled.div`\n  border-radius: 5px;\n  overflow: hidden;\n`\n\nexport const HeaderWrapper = styled.div`\n  margin-bottom: 20px;\n`\n\nexport const InputFormWrapper = styled(ItemWrapper)`\n  margin-bottom: 20px;\n`\n","import styled from \"styled-components\";\n\nconst AppContainer = styled.div`\n  width: 600px;\n  margin: auto;\n  margin-top: 100px;\n`\n\nexport default AppContainer;\n","import styled from \"styled-components\";\n\ntype ContainerProps = {\n  readonly url: string,\n}\n\nexport const Container = styled.div<ContainerProps>`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 250px;\n  background-image: url(${props => props.url ? props.url : ''});\n  background-repeat: no-repeat;\n  background-size: cover;\n  z-index: -1;\n`","import { Container } from './style';\n\ntype PropsType = {\n  url: string,\n}\n\nexport default function Banner({ url }: PropsType) {\n  return <Container url={url} />\n}","import styled from \"styled-components\";\n\nexport const Container = styled.header`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const Heading = styled.h2`\n  font-size: 35px;\n  letter-spacing: 0.5em;\n`","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n`\n","import React from 'react';\nimport { Button } from './style'\n\ntype PropsType = {\n  theme: string,\n  onClick?: () => void,\n}\n\nexport default function ThemeToggleButton({theme, onClick}: PropsType) {\n  return (\n    <Button onClick={onClick}>\n      {theme === 'dark' ?\n        <img src=\"./images/icon-sun.svg\" alt=\"theme toggle button icon\" /> :\n        <img src=\"./images/icon-moon.svg\" alt=\"theme toggle button icon\" />\n      }\n    </Button>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const themeSlice = createSlice({\n  name: 'theme',\n  initialState: 'dark',\n  reducers: {\n    toggleTheme: (state) => {\n      if(state === 'dark'){\n        return 'light'\n      }\n\n      return 'dark'\n    }\n  }\n})\n\nexport const {\n  toggleTheme\n} = themeSlice.actions;\n\nexport default themeSlice.reducer;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Heading } from './style';\nimport ThemeToggleButton from '../ThemeToggleButton/ThemeToggleButton';\nimport { RootState } from '../../rootReducer';\nimport { toggleTheme } from '../../slices/themeSlice';\n\nexport default function Header() {\n  const theme = useSelector((state: RootState) => state.theme);\n  const dispatch = useDispatch();\n  const toggle = () => {\n    dispatch(toggleTheme());\n  }\n  return(\n    <Container>\n      <Heading>TODO</Heading>\n      <ThemeToggleButton theme={theme} onClick={toggle} />\n    </Container>\n  )\n}","import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport type TodoType = {\n  id: string,\n  text: string,\n  checked: boolean,\n  positionInList?: number,\n}\n\ntype TodoList = Array<TodoType>\n\ntype MovoTodoPayload = {\n  fromId: string,\n  toId: string,\n}\n\nexport const todoListSlice = createSlice({\n  name: 'todoList',\n  initialState: [] as TodoList,\n  reducers: {\n    addList: {\n      reducer: (state, action: PayloadAction<TodoType>) => {\n        state.push(action.payload);\n      },\n      prepare: (text: string) => {\n        return {\n          payload: {\n            id: nanoid(),\n            text,\n            checked: false,\n          }\n        }\n      }\n    },\n    clearCompletedTodo: (state) => {\n      return state.filter(todo => todo.checked === false);\n    },\n    moveTodo: (state, action: PayloadAction<MovoTodoPayload>) => {\n      const { fromId, toId } = action.payload;\n      const fromIndex = state.findIndex(todo => todo.id === fromId);\n      const toIndex = state.findIndex(todo => todo.id === toId);\n      const tempTodo = state[toIndex];\n      state[toIndex] = state[fromIndex];\n      state[fromIndex] = tempTodo;\n    },\n    toggleTodo: (state, action: PayloadAction<string>) => state.map(todo => {\n      if (todo.id === action.payload) {\n        return {\n          ...todo,\n          checked: !todo.checked,\n        }\n      }\n\n      return todo\n    }),\n  }\n})\n\nexport const {\n  addList,\n  moveTodo,\n  clearCompletedTodo,\n  toggleTodo,\n} = todoListSlice.actions;\n\nexport default todoListSlice.reducer;","import styled from \"styled-components\";\n\ntype ContainerProps = {\n  checked: boolean,\n}\n\nexport const Container = styled.span<ContainerProps>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 25px;\n  height: 25px;\n  border-radius: 25px;\n  background: ${({ checked }) => checked ? 'linear-gradient(hsl(192, 100%, 67%), hsl(280, 87%, 65%))' : 'transparent'};\n  border: solid 1px ${({theme}) => theme.checkBoxBorder};\n`","import React from 'react';\nimport { Container } from './style'\n\ntype PropsType = {\n  checked?: boolean,\n}\n\nexport default function CheckIcon({ checked = false }: PropsType) {\n  return(\n    <Container checked={checked}>\n      {checked &&\n        <img src=\"./images/icon-check.svg\" alt=\"check icon\" />\n      }\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 70px;\n  background-color: ${({ theme }) => theme.listItem};\n`;\n\nexport const IconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 70px;\n`\n\nexport const Input = styled.input`\n  background-color: transparent;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  font-family: 'Josefin Sans';\n  font-size: 18px;\n`","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addList } from '../../slices/todoListSlice';\nimport CheckIcon from '../CheckIcon/CheckIcon';\nimport { Container, Wrapper, IconContainer, Input } from './style'\n\nexport default function InputForm() {\n  const [value, setValue] = useState('');\n  const dispatch = useDispatch();\n\n  const onSubmitHandler = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    dispatch(addList(value));\n    setValue('');\n  }\n\n  const onChangeHandler = (e: React.FormEvent<HTMLInputElement>) => setValue(e.currentTarget.value);\n  return (\n    <Container>\n      <Wrapper>\n        <IconContainer>\n          <CheckIcon />\n        </IconContainer>\n        <form onSubmit={onSubmitHandler}>\n          <Input value={value} onChange={onChangeHandler} placeholder=\"Create a new todo\" />\n        </form>\n      </Wrapper>\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 70px;\n  background-color: ${({ theme }) => theme.listItem};\n  border-bottom: solid 1px ${({theme}) => theme.listItemBorder};\n`;\n\nexport const IconButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 70px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`\n\ntype TextProps = {\n  checked: boolean\n}\n\nexport const Text = styled.span<TextProps>`\n  color: ${({ theme }) => theme.textPrimary};\n\n  ${({checked}) => checked && `\n    text-decoration-line: line-through;\n    opacity: 0.5;\n  `}\n`","import React from 'react'\nimport CheckIcon from '../CheckIcon/CheckIcon'\nimport { Container, IconButton, Wrapper, Text } from './style'\nimport { TodoType, toggleTodo, moveTodo } from '../../slices/todoListSlice';\nimport { useDispatch } from 'react-redux';\nimport { useDrag, useDrop } from 'react-dnd';\n\ntype PropsType = {\n  todo: TodoType,\n};\n\nexport default function Todo({ todo }: PropsType) {\n  const { id, checked, text } = todo;\n  const dispatch = useDispatch();\n\n  const [, drag] = useDrag(() => ({\n    item: todo,\n    type: 'TODO',\n  }))\n\n  const [, drop] = useDrop({\n    accept: 'TODO',\n    drop: (item: TodoType) => {\n      const fromId = item.id as string;\n      const toId = todo.id as string;\n      dispatch(moveTodo({fromId, toId}));\n    }\n  })\n\n  const toggle = () => {\n    dispatch(toggleTodo(id));\n  }\n\n  return (\n    <div ref={drop}>\n      <Container ref={drag}>\n        <Wrapper>\n          <IconButton onClick={toggle}>\n            <CheckIcon checked={checked} />\n          </IconButton>\n          <Text checked={checked}>{text}</Text>\n        </Wrapper>\n      </Container>\n    </div>\n  )\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Filter = string;\n\nexport const ALL: Filter = 'ALL';\nexport const ACTIVE: Filter = 'ACTIVE';\nexport const COMPLETED: Filter = 'COMPLETED';\n\ntype FilterType = {\n  type: Filter,\n}\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: {\n    type: ALL,\n  } as FilterType,\n  reducers: {\n    changeFilter: (state, action: PayloadAction<Filter>) => {\n      state.type = action.payload\n    }\n  }\n})\n\nexport const {\n  changeFilter\n} = filterSlice.actions;\n\nexport default filterSlice.reducer;","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  background-color: ${({ theme }) => theme.listItem};\n  height: 50px;\n  width: 100%;\n  font-size: 14px;\n  color: ${({ theme }) => theme.textSecondary};\n`;\n\nexport const FilterListItem = styled.li`\n  display: inline-block;\n  margin-left: 10px;\n  margin-right: 10px;\n`\n\ntype FilterButtonProps = {\n  active?: boolean,\n}\n\nexport const FilterButton = styled.button<FilterButtonProps>`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n  color: inherit;\n  font-weight: 700;\n  transition: color 0.2s linear;\n\n  &:hover{\n    color: ${({ theme }) => theme.textHover};\n    transition: color 0.2s linear;\n  }\n\n  ${props => props.active && `color: ${props.theme.textHover}`};\n`\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useClearCompleted from '../../hooks/useClearCompleted';\nimport { useFilter } from '../../hooks/useFilter';\nimport { RootState } from '../../rootReducer';\nimport { ACTIVE, ALL, COMPLETED } from '../../slices/filterSlice';\nimport { Container, FilterListItem, FilterButton } from './style';\n\nexport default function ToolBar() {\n  const todoList = useSelector((state: RootState) => state.todoList);\n  const [isActive, filterOnChange] = useFilter();\n  const clearCompleted = useClearCompleted();\n\n  return(\n    <Container>\n      <div>{todoList.length} items left</div>\n      <ul>\n        <FilterListItem>\n          <FilterButton active={isActive(ALL)} onClick={() => filterOnChange(ALL)}>All</FilterButton>\n        </FilterListItem>\n        <FilterListItem>\n          <FilterButton active={isActive(ACTIVE)} onClick={() => filterOnChange(ACTIVE)}>Active</FilterButton>\n        </FilterListItem>\n        <FilterListItem>\n          <FilterButton active={isActive(COMPLETED)} onClick={() => filterOnChange(COMPLETED)}>Completed</FilterButton>\n        </FilterListItem>\n      </ul>\n      <FilterButton onClick={clearCompleted}>\n        Clear Completed\n      </FilterButton>\n    </Container>\n  )\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../rootReducer\";\nimport { Filter, changeFilter } from '../slices/filterSlice';\n\nexport function useFilter() {\n  const dispatch = useDispatch();\n  const currentFilter = useSelector((state: RootState) => state.filter);\n\n  const filterOnChange = (type: Filter) => {\n    dispatch(changeFilter(type));\n  }\n\n  const isActive = (type: Filter) => {\n    if (type === currentFilter.type) {\n      return true\n    }\n\n    return false\n  }\n\n  return [isActive, filterOnChange] as const;\n}","import { useDispatch } from \"react-redux\"\nimport { clearCompletedTodo } from \"../slices/todoListSlice\";\n\nexport default function useClearCompleted() {\n  const dispatch = useDispatch();\n\n  const clearCompleted = () => {\n    dispatch(clearCompletedTodo());\n  }\n\n  return clearCompleted\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { RootState } from '../../rootReducer';\n\nimport { lightTheme, darkTheme } from '../../styles/theme';\nimport { GlobalStyles } from '../../styles/GlobalStyles';\nimport { HeaderWrapper, InputFormWrapper, ItemWrapper } from './style';\n\nimport AppContainer from '../AppContainer/AppContainer';\nimport Banner from '../Banner/Banner';\nimport Header from '../Header/Header';\nimport InputForm from '../InputForm/InputForm';\nimport Todo from '../Todo/Todo';\nimport ToolBar from '../ToolBar/ToolBar';\nimport { ACTIVE, ALL, COMPLETED } from '../../slices/filterSlice';\nimport { TodoType } from '../../slices/todoListSlice';\nimport appendIndexToTodo from '../../helper/appendIndexToTodo';\n\nexport default function App() {\n  const todoList = useSelector((state: RootState) => state.todoList);\n  const theme = useSelector((state: RootState) => state.theme);\n  const filter = useSelector((state: RootState) => state.filter);\n\n  const renderList = () => {\n\n    //Append index information on every todo item.\n    let filteredList: Array<TodoType> = [...todoList];\n\n    switch (filter.type) {\n      case ALL:\n        break;\n      case COMPLETED:\n        filteredList = todoList.filter(todo => todo.checked === true);\n        break;\n      case ACTIVE:\n        filteredList = todoList.filter(todo => todo.checked === false);\n        break;\n    }\n\n    return filteredList.map((todo) => (\n      <Todo key={todo.id} todo={todo} />\n    ))\n  }\n\n  return (\n    <ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>\n      <GlobalStyles />\n      <Banner url=\"./images/bg-desktop-dark.jpg\" />\n      <AppContainer>\n        <HeaderWrapper>\n          <Header />\n        </HeaderWrapper>\n        <InputFormWrapper>\n          <InputForm />\n        </InputFormWrapper>\n        <ItemWrapper>\n          <DndProvider backend={HTML5Backend}>\n            <ul>\n              {renderList()}\n            </ul>\n          </DndProvider>\n          <ToolBar />\n        </ItemWrapper>\n      </AppContainer>\n    </ThemeProvider>\n  )\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport themeReducer from './slices/themeSlice';\nimport todoListReducer from './slices/todoListSlice';\nimport filterReducer from './slices/filterSlice'\n\nconst rootReducer = combineReducers({\n  todoList: todoListReducer,\n  theme: themeReducer,\n  filter: filterReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nexport const store = configureStore({\n  reducer: rootReducer,\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport const { getState } = store;","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport { ResetStyles } from './styles/GlobalStyles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ResetStyles />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'));\n"],"sourceRoot":""}